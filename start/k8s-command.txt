安装minikube
    curl -Lo minikube https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.16.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
    minikube start --driver=docker --image-mirror-country cn 

安装
    You can bootstrap a cluster as follows:
    1. Initializes cluster master node:
    kubeadm init --apiserver-advertise-address $(hostname -i) --pod-network-cidr 10.5.0.0/16
    2. Initialize cluster networking:
    kubectl apply -f https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml
    3. (Optional) Create an nginx deployment:
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/application/nginx-app.yaml
    修改主机名称：
    hostnamectl set-hostname k8s-node17
    参考:
    https://zhuanlan.zhihu.com/p/55740564?from_voters_page=true
    添加源
    yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
    yum install -y docker-ce-19.03.10-3.el7
    [kuebrnetes]
    name=Kubernetes Repository
    baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
    enabled=1
    gpgcheck=0


    yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

    kubeadm init --apiserver-advertise-address 172.16.0.16 --pod-network-cidr 10.5.0.0/16

Module 2 - Deploy an app


 kubectl version


 kubectl get nodes  ##查看集群节点


 kubectl get nodes --help  ##查看集群节点扩展用法

 ##创建deployment，需要指明名称，app镜像路径
 kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1


 #查看deployment
 kubectl get deployments

 kubectl proxy


Module 3 - Explore your app

 kubectl get nodes|deployments|pods - 列出资源
 kubectl describe - 显示有关资源的详细信息
 kubectl logs - 打印 pod 和其中容器的日志
 kubectl exec - 在 pod 中的容器上执行命令

 export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
 kubectl exec $POD_NAME env
 kubectl exec -ti $POD_NAME bash #进入指定的pod

 kubectl proxy
 curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/



Module 4 - Expose your app publicly

    kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
    kubectl expose deployment/hello-node --type="NodePort" --port 8080 ##port为需要暴露的端口
    kubectl get services
    kubectl get pods -l run=kubernetes-bootcamp
    kubectl get services -l run=kubernetes-bootcamp
    export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
    echo Name of the Pod: $POD_NAME
    kubectl describe pods $POD_NAME
    kubectl get pods -l app=v1

    kubectl label pod $POD_NAME app=v1

    kubectl describe services/hello-node
    kubectl describe services/kubernetes-bootcamp
    

    kubectl delete service -l run=kubernetes-bootcamp
    export NODE_PORT=$(kubectl get services/hello-node -o go-template='{{(index .spec.ports 0).nodePort}}')
    export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
    echo NODE_PORT=$NODE_PORT
    curl $(minikube ip):$NODE_PORT  ##删除之后直接访问会失败
    kubectl exec -ti $POD_NAME -- curl localhost:8080 ##直接进入容器执行,用于验证pod是否启动成功

Module 5 - Scale up your app

    ##查看ReplicaSet数量
    kubectl get rs
    kubectl get rs -l app=hello-node
        ###DESIRED displays the desired number of replicas of the application, which you define when you create the Deployment. This is the desired state.
        ###CURRENT displays how many replicas are currently running.
    
    #缩放应用 及其查看结果
        ###scale up: 扩容
        kubectl scale deployments/hello-node --replicas=4
        kubectl scale deployments/kubernetes-bootcamp --replicas=4
        kubectl describe services/kubernetes-bootcamp
        kubectl get rs -l app=hello-node
            ## ReplicaSet命名规则：
            ## [DEPLOYMENT-NAME]-[RANDOM-STRING]
            ## eg: hello-node-5d547bd6f6
        kubectl get deployment -l  app=hello-node
        kubectl get pods -l app=hello-node -o wide
        kubectl describe deployments/kubernetes-bootcamp
        export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
        kubectl describe deployments/kubernetes-bootcamp
        curl $(minikube ip):$NODE_PORT

    ### scale down 缩容
        kubectl scale deployments/kubernetes-bootcamp --replicas=2
        kubectl get deployments
        kubectl get po -o wide

Module 6 - Update your app
    ## 滚动更新（pod的ip地址会发生变化） （会新建一个replicaset？？？）
    kubectl get deployments
    kubectl get pods
    kubectl describe pods
    kubectl describe services/kubernetes-bootcamp
    export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
    echo NODE_PORT=$NODE_PORT
    curl $(minikube ip):$NODE_PORT
    ## kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
    ##docker.io/zhangguanzhang/gcr.io.google-samples.kubernetes-bootcamp:v1
    kubectl describe deployments/kubernetes-bootcamp
    kubectl set image deployments/kubernetes-bootcamp gcr-io-google-samples-kubernetes-bootcamp-ck2rh=jocatalin/kubernetes-bootcamp:v2
    ## 查看状态
    kubectl rollout status deployments/kubernetes-bootcamp
    ## 回滚
    kubectl rollout undo deployments/kubernetes-bootcamp
    kubectl describe pods
    kubectl get pods
    curl $(minikube ip):$NODE_PORT

配置 java 微服务 Configuring a Kubernetes Microservice Configuring a Java Microservice
    
    mvn package -pl system
    mvn package -pl inventory
    kubectl apply -f kubernetes.yaml
    kubectl wait --for=condition=ready pod -l app=inventory
    kubectl wait --for=condition=ready pod -l app=system
    curl -u bob:bobpwd http://$( minikube ip ):31000/system/properties
    curl http://$( minikube ip ):32000/inventory/systems/system-service | grep -i ^X-App-Name:
    curl -# -I -u bob:bobpwd -D - http://$( minikube ip ):31000/system/properties | grep -i ^X-App-Name:


    kubectl create configmap sys-app-name --from-literal name=my-system
    kubectl create secret generic sys-app-credentials --from-literal username=bob --from-literal password=bobpwd
    
    mvn package -pl system
    mvn package -pl inventory
    kubectl replace --force -f kubernetes.yaml

    #持续观察
    kubectl get --watch pods
    curl -# -I -u bob:bobpwd -D - http://$( minikube ip ):31000/system/properties -o /dev/null
    curl http://$( minikube ip ):32000/inventory/systems/system-service 

创建redis
    ##使用以下命令检查创建的对象
    mkdir pod-redis
    cd pod-redis 
    curl -OL https://k8s.io/examples/pods/config/redis-pod.yaml
    curl -OL https://k8s.io/examples/pods/config/redis-config
    cat <<EOF >./kustomization.yaml
    configMapGenerator:
    - name: example-redis-config
      files:
      - redis-config
    resources:
    - redis-pod.yaml
    EOF

    kubectl apply -k .
    kubectl get -k .
    
    kubectl delete pod redis

##image源替换
curl -s https://zhangguanzhang.github.io/bash/pull.sh | bash -s search gcr.io/google-samples/node-hello:1.0

registry.aliyuncs.com/google_containers/echoserver:1.4

docker.io/zhangguanzhang/gcr.io.google-samples.kubernetes-bootcamp:v1

docker.io/zhangguanzhang/gcr.io.google-samples.node-hello:1.0

docker.io/zhangguanzhang/gcr.io.google_containers.kube-state-metrics:v1.9.5


只需要将 k8s.gcr.io 换成 registry.aliyuncs.com/google_containers 即可使用阿里云镜像进行下载


公开外部 IP 地址以访问集群中应用程序
    wget https://k8s.io/examples/service/load-balancer-example.yaml
    修改 load-balancer-example.yaml
    #- image: gcr.io/google-samples/node-hello:1.0
    - image: docker.io/zhangguanzhang/gcr.io.google-samples.node-hello:1.0
    kubectl apply -f https://k8s.io/examples/service/load-balancer-example.yaml
    kubectl get deployments hello-world
    kubectl describe deployments hello-world
    kubectl get replicasets
    kubectl describe replicasets
    ##暴露端口
    kubectl expose deployment hello-world --type=LoadBalancer --name=hello-world
    kubectl get services hello-world
    kubectl describe services hello-world
    curl http://<external-ip>:<port>
    export NODE_PORT=$(kubectl get services/hello-world -o go-template='{{(index .spec.ports 0).nodePort}}')
    echo NODE_PORT=$NODE_PORT

    ##minikube 使用情况：
    minikube service hello-world

    curl $(minikube ip):$NODE_PORT

    ##清除
    kubectl delete services hello-world
    kubectl delete deployment hello-world

示例：使用 Redis 部署 PHP 留言板应用程序
    ## 创建主节点
    wget https://k8s.io/examples/application/guestbook/redis-master-deployment.yaml
    修改image源
    将 k8s.gcr.io 换成 registry.aliyuncs.com/google_containers
    将 k8s.gcr.io/redis:e2e 替换成 forestgun007/redis:e2e
    kubectl apply -f ./redis-master-deployment.yaml
    kubectl get pods
    kubectl get deployments
    kubectl get pods -l app=redis
    export POD_NAME=$(kubectl get pods  -l app=redis -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
    kubectl logs -f $POD_NAME

    ## 创建主节点服务
    kubectl apply -f https://k8s.io/examples/application/guestbook/redis-master-service.yaml
    kubectl get service
    kubectl describe service -l app=redis

    ## 启动 Redis 从节点
    wget https://k8s.io/examples/application/guestbook/redis-slave-deployment.yaml
    修改image源
    gcr.io/google_samples/gb-redisslave:v3 替换为 dawnsky/gb-redisslave:v3 
    kubectl apply -f redis-slave-deployment.yaml
    kubectl get pods
    ## 创建从节点服务
    kubectl apply -f https://k8s.io/examples/application/guestbook/redis-slave-service.yaml
    kubectl get svc

    ## 设置并公开留言板前端
    wget https://k8s.io/examples/application/guestbook/frontend-deployment.yaml
    kubectl apply -f frontend-deployment.yaml
    修改image源
    gcr.io/google-samples/gb-frontend:v4 替换为forestgun007/google-samples-gb-frontend:v4
    kubectl get pods -l app=guestbook -l tier=frontend

    kubectl apply -f https://k8s.io/examples/application/guestbook/frontend-service.yaml
    kubectl get services
    #显示访问地址
    minikube service frontend --url
    查看 iptables -S -t nat

    ## 对前端进行扩容
    kubectl scale deployment frontend --replicas=5
    kubectl get pods -l app=guestbook
    kubectl scale deployment frontend --replicas=2

    ## 清理现场
    kubectl delete deployment -l app=redis
    kubectl delete service -l app=redis
    kubectl delete deployment -l app=guestbook
    kubectl delete service -l app=guestbook

示例：添加日志和指标到 PHP / Redis Guestbook 案例
    ###启动用 Redis 部署的 PHP Guestbook 参见上一个示例
    ## 添加一个集群角色绑定 

    kubectl create clusterrolebinding cluster-admin-binding 
    --clusterrole=cluster-admin --user=<your email associated with the k8s provider account>

    kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=dj
    kubectl get clusterrolebinding/cluster-admin-binding -o wide
    结果如下:
    ```
    NAME                    ROLE                        AGE   USERS   GROUPS   SERVICEACCOUNTS
    cluster-admin-binding   ClusterRole/cluster-admin   48s   dj 
    ```
    安装 kube-state-metrics
    git clone https://github.com/kubernetes/kube-state-metrics.git kube-state-metrics
    
    deployment.yaml文件的
    k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.0.0-beta
    替换为：
    docker.io/dayunshan/k8s.gcr.io.kubebeta-state-metrics:v2.0.0-beta

    kubectl apply -f kube-state-metrics/examples/standard

    kubectl get pods --namespace=kube-system -l app.kubernetes.io/name=kube-state-metrics

    git clone https://github.com/elastic/examples.git

    cd examples/beats-k8s-send-anywhere


    docker pull kibana:7.10.1
    docker pull elasticsearch:7.10.1

    docker run  -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.10.1
    查看es容器的ip：docker inspect xxxxx |grep IPAddress

    docker run -d -p 5601:5601 --name kibana -e "elasticsearch_url=http://172.17.0.2:9200" -v /root/kibana.yml:/opt/kibana/config/kibana.yml kibana:7.10.1

    kubectl create secret generic dynamic-logging \
      --from-file=./ELASTICSEARCH_HOSTS \
      --from-file=./ELASTICSEARCH_PASSWORD \
      --from-file=./ELASTICSEARCH_USERNAME \
      --from-file=./KIBANA_HOST \
      --namespace=kube-system
    #文件修改为docker 创建的kibana和es地址
    部署 Filebeat 
    kubectl create -f filebeat-kubernetes.yaml
    kubectl get pods -n kube-system -l k8s-app=filebeat-dynamic

    kubectl apply -f metricbeat-kubernetes.yaml
    kubectl get pods -n kube-system -l k8s-app=metricbeat


    kubectl apply -f packetbeat-kubernetes.yaml


    清理现场
    kubectl delete deployment -l app=redis
    kubectl delete service -l app=redis
    kubectl delete deployment -l app=guestbook
    kubectl delete service -l app=guestbook
    kubectl delete -f filebeat-kubernetes.yaml
    kubectl delete -f metricbeat-kubernetes.yaml
    kubectl delete -f packetbeat-kubernetes.yaml
    kubectl delete secret dynamic-logging -n kube-system

有状态应用:示例：使用 Persistent Volumes 部署 WordPress 和 MySQL
    #创建 PersistentVolumeClaims 和 PersistentVolumes
    #创建 kustomization.yaml 使用
    #    Secret 生成器
    #    MySQL 资源配置
    #    WordPress 资源配置
    #应用整个 kustomization 目录 kubectl apply -k ./
    #清理
    curl -LO https://k8s.io/examples/application/wordpress/mysql-deployment.yaml
    curl -LO https://k8s.io/examples/application/wordpress/wordpress-deployment.yaml

    cat <<EOF >./kustomization.yaml
    secretGenerator:
    - name: mysql-pass
    literals:
    - password=YOUR_PASSWORD
    EOF
    cat <<EOF >>./kustomization.yaml
    resources:
    - mysql-deployment.yaml
    - wordpress-deployment.yaml
    EOF

    kubectl apply -k ./
    kubectl get services wordpress

    minikube service wordpress --url

    dayunshan
    aZlPN$agYiBaX89UL6

    清理现场    
    kubectl delete -k ./

StatefulSet 基础 https://kubernetes.io/zh/docs/tutorials/stateful-application/basic-stateful-set/
    kubectl get pods -w -l app=nginx    
    kubectl apply -f web.yaml

    kubectl get statefulset web
    kubectl get svc nginx

    使用 kubectl run 运行一个提供 nslookup 命令的容器，该命令来自于 dnsutils 包。通过对 Pod 的主机名执行 nslookup，你可以检查他们在集群内部的 DNS 地址。
    kubectl run -i --tty --image busybox:1.28 dns-test --restart=Never --rm
    >>nslookup web-0.nginx
    kubectl get pvc -l app=nginx
    扩容/缩容 StatefulSet
    kubectl scale sts web --replicas=5
    kubectl patch sts web -p '{"spec":{"replicas":3}}'
    #修改配置
    kubectl patch statefulset web -p '{"spec":{"updateStrategy":{"type":"RollingUpdate"}}}'

    清理现场
    kubectl delete -f ./web-parallel.yaml

    你需要删除本教程中用到的 PersistentVolumes 的持久化存储介质
    















    








